// <auto-generated />
using FastRouting.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastRouting.Context.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FastRouting.Repositories.Entities.Coordinate", b =>
                {
                    b.Property<int>("coordinateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("coordinateId"));

                    b.Property<double>("x")
                        .HasColumnType("float");

                    b.Property<double>("y")
                        .HasColumnType("float");

                    b.Property<int>("z")
                        .HasColumnType("int");

                    b.HasKey("coordinateId");

                    b.ToTable("Coordinate");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.Edges", b =>
                {
                    b.Property<int>("locationIdA")
                        .HasColumnType("int");

                    b.Property<int>("locationIdB")
                        .HasColumnType("int");

                    b.Property<int>("centerId")
                        .HasColumnType("int");

                    b.Property<double>("distance")
                        .HasColumnType("float");

                    b.HasKey("locationIdA", "locationIdB");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.Intersections", b =>
                {
                    b.Property<int>("intersectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intersectionId"));

                    b.Property<bool>("IntersectionOnLocation")
                        .HasColumnType("bit");

                    b.Property<int>("centerId")
                        .HasColumnType("int");

                    b.Property<int>("coordinateId")
                        .HasColumnType("int");

                    b.HasKey("intersectionId");

                    b.HasIndex("coordinateId");

                    b.ToTable("Intersections");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.Location", b =>
                {
                    b.Property<int>("locationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("locationId"));

                    b.Property<int>("centerId")
                        .HasColumnType("int");

                    b.Property<int>("coordinateId")
                        .HasColumnType("int");

                    b.Property<string>("locationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("locationTypesId")
                        .HasColumnType("int");

                    b.Property<int>("transitionId")
                        .HasColumnType("int");

                    b.HasKey("locationId");

                    b.HasIndex("coordinateId");

                    b.HasIndex("locationTypesId");

                    b.HasIndex("transitionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.LocationTypes", b =>
                {
                    b.Property<int>("locationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("locationTypeId"));

                    b.Property<string>("locationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("locationTypeId");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.TheMallPhotos", b =>
                {
                    b.Property<int>("theMallPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("theMallPhotoId"));

                    b.Property<int>("centerId")
                        .HasColumnType("int");

                    b.Property<int>("floor")
                        .HasColumnType("int");

                    b.Property<byte[]>("image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("theMallPhotoId");

                    b.ToTable("TheMallPhotos");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.Transition", b =>
                {
                    b.Property<int>("trasitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("trasitionId"));

                    b.Property<string>("transitionsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("trasitionId");

                    b.ToTable("Transitions");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.TransitionsToIntersections", b =>
                {
                    b.Property<int>("transitionId")
                        .HasColumnType("int");

                    b.Property<int>("intersectionId")
                        .HasColumnType("int");

                    b.HasKey("transitionId", "intersectionId");

                    b.ToTable("TransitionsToIntersections");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.shoppingMalls", b =>
                {
                    b.Property<int>("shoppingMallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("shoppingMallId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("shoppingMallId");

                    b.ToTable("shoppingMalls");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.Intersections", b =>
                {
                    b.HasOne("FastRouting.Repositories.Entities.Coordinate", "coordinate")
                        .WithMany()
                        .HasForeignKey("coordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coordinate");
                });

            modelBuilder.Entity("FastRouting.Repositories.Entities.Location", b =>
                {
                    b.HasOne("FastRouting.Repositories.Entities.Coordinate", "coordinate")
                        .WithMany()
                        .HasForeignKey("coordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastRouting.Repositories.Entities.LocationTypes", "locationTypes")
                        .WithMany()
                        .HasForeignKey("locationTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastRouting.Repositories.Entities.Transition", "transitions")
                        .WithMany()
                        .HasForeignKey("transitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coordinate");

                    b.Navigation("locationTypes");

                    b.Navigation("transitions");
                });
#pragma warning restore 612, 618
        }
    }
}
